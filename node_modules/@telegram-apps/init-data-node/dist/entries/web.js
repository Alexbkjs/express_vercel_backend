import { h as hashToken$1, s as sign$1, a as signData$1, v as validate$1 } from "./index-B3St0Z1E.js";
import { i, p } from "./index-B3St0Z1E.js";
const createHmac = async (data, key) => {
  const encoder = new TextEncoder();
  return Buffer.from(
    await crypto.subtle.sign(
      "HMAC",
      await crypto.subtle.importKey(
        "raw",
        typeof key === "string" ? encoder.encode(key) : key,
        { name: "HMAC", hash: "SHA-256" },
        false,
        ["sign", "verify"]
      ),
      encoder.encode(data.toString())
    )
  );
};
function hashToken(token) {
  return hashToken$1(token, createHmac);
}
function sign(data, key, authDate, options) {
  return sign$1(data, key, authDate, signData, options);
}
async function signData(data, key, options) {
  return signData$1(data, key, createHmac, options);
}
async function validate(value, token, options) {
  return validate$1(value, token, signData, options);
}
export {
  hashToken,
  i as initDataToSearchParams,
  p as parse,
  sign,
  signData,
  validate
};
//# sourceMappingURL=web.js.map
