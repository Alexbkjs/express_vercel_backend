{"version":3,"file":"node.js","sources":["../../src/entries/node.ts"],"sourcesContent":["import { createHmac as nodeCreateHmac } from 'node:crypto';\nimport { InitData, InitDataParsed } from '@telegram-apps/sdk';\n\nimport { hashToken as baseHashToken } from '../hashToken.js';\nimport { sign as baseSign, SignOptions } from '../sign.js';\nimport { signData as baseSignData, SignDataOptions } from '../signData.js';\nimport { validate as baseValidate } from '../validate.js';\nimport type { ValidateOptions } from '../validate.js';\nimport type { CreateHmacFn, SignData, Text } from '../types.js';\n\nconst createHmac: CreateHmacFn<false> = (data, key) => {\n  return nodeCreateHmac('sha256', key).update(data).digest();\n};\n\n/**\n * Hashes specified token using a string, expected during init data sign.\n * @param token - token to hash.\n */\nexport function hashToken(token: Text): Buffer {\n  return baseHashToken(token, createHmac);\n}\n\n/**\n * Signs specified init data.\n * @param data - init data to sign.\n * @param authDate - date, when this init data should be signed.\n * @param key - private key.\n * @param options - additional options.\n * @returns Signed init data presented as query parameters.\n */\nexport function sign(data: SignData, key: Text, authDate: Date, options?: SignOptions): string {\n  return baseSign(data, key, authDate, signData, options);\n}\n\n/**\n * Signs specified data with the passed token.\n * @param data - data to sign.\n * @param key - private key.\n * @param options - additional options.\n * @returns Data sign.\n */\nexport function signData(data: Text, key: Text, options?: SignDataOptions): string {\n  return baseSignData(data, key, createHmac, options);\n}\n\n/**\n * Validates passed init data.\n * @param value - value to check.\n * @param token - bot secret token.\n * @param options - additional validation options.\n * @throws {TypeError} \"auth_date\" should present integer\n * @throws {Error} \"hash\" is empty or not found\n * @throws {Error} \"auth_date\" is empty or not found\n * @throws {Error} Init data expired\n */\nexport function validate(\n  value: InitData | InitDataParsed | string | URLSearchParams,\n  token: Text,\n  options?: ValidateOptions,\n): void {\n  return baseValidate(value, token, signData, options);\n}\n\nexport * from './shared.js';\n"],"names":["nodeCreateHmac","baseHashToken","baseSign","baseSignData","baseValidate"],"mappings":";;;AAUA,MAAM,aAAkC,CAAC,MAAM,QAAQ;AACrD,SAAOA,aAAe,UAAU,GAAG,EAAE,OAAO,IAAI,EAAE;AACpD;AAMO,SAAS,UAAU,OAAqB;AACtC,SAAAC,YAAc,OAAO,UAAU;AACxC;AAUO,SAAS,KAAK,MAAgB,KAAW,UAAgB,SAA+B;AAC7F,SAAOC,OAAS,MAAM,KAAK,UAAU,UAAU,OAAO;AACxD;AASgB,SAAA,SAAS,MAAY,KAAW,SAAmC;AACjF,SAAOC,WAAa,MAAM,KAAK,YAAY,OAAO;AACpD;AAYgB,SAAA,SACd,OACA,OACA,SACM;AACN,SAAOC,WAAa,OAAO,OAAO,UAAU,OAAO;AACrD;"}