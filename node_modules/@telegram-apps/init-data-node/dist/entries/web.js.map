{"version":3,"file":"web.js","sources":["../../src/entries/web.ts"],"sourcesContent":["import { InitData, InitDataParsed } from '@telegram-apps/sdk';\n\nimport { hashToken as baseHashToken } from '../hashToken.js';\nimport { sign as baseSign, SignOptions } from '../sign.js';\nimport { signData as baseSignData, SignDataOptions } from '../signData.js';\nimport { validate as baseValidate } from '../validate.js';\nimport type{ ValidateOptions } from '../validate.js';\nimport type { CreateHmacFn, SignData, Text } from '../types.js';\n\nconst createHmac: CreateHmacFn<true> = async (data, key) => {\n  const encoder = new TextEncoder();\n\n  return Buffer.from(\n    await crypto.subtle.sign(\n      'HMAC',\n      await crypto.subtle.importKey(\n        'raw',\n        typeof key === 'string' ? encoder.encode(key) : key,\n        { name: 'HMAC', hash: 'SHA-256' },\n        false,\n        ['sign', 'verify'],\n      ),\n      encoder.encode(data.toString()),\n    ),\n  );\n};\n\n\n/**\n * Hashes specified token using a string, expected during init data sign.\n * @param token - token to hash.\n */\nexport function hashToken(token: Text): Promise<Buffer> {\n  return baseHashToken(token, createHmac);\n}\n\n/**\n * Signs specified init data.\n * @param data - init data to sign.\n * @param authDate - date, when this init data should be signed.\n * @param key - private key.\n * @param options - additional options.\n * @returns Signed init data presented as query parameters.\n */\nexport function sign(\n  data: SignData,\n  key: Text,\n  authDate: Date,\n  options?: SignOptions\n): Promise<string> {\n  return baseSign(data, key, authDate, signData, options);\n}\n\n/**\n * Signs specified data with the passed token.\n * @param data - data to sign.\n * @param key - private key.\n * @param options - additional options.\n * @returns Data sign.\n */\nexport async function signData(data: Text, key: Text, options?: SignDataOptions): Promise<string> {\n  return baseSignData(data, key, createHmac, options);\n}\n\n/**\n * Validates passed init data.\n * @param value - value to check.\n * @param token - bot secret token.\n * @param options - additional validation options.\n * @throws {TypeError} \"auth_date\" should present integer\n * @throws {Error} \"hash\" is empty or not found\n * @throws {Error} \"auth_date\" is empty or not found\n * @throws {Error} Init data expired\n */\nexport async function validate(\n  value: InitData | InitDataParsed | string | URLSearchParams,\n  token: Text,\n  options?: ValidateOptions,\n): Promise<void> {\n  return baseValidate(value, token, signData, options);\n}\n\nexport * from './shared.js';\n"],"names":["baseHashToken","baseSign","baseSignData","baseValidate"],"mappings":";;AASA,MAAM,aAAiC,OAAO,MAAM,QAAQ;AACpD,QAAA,UAAU,IAAI;AAEpB,SAAO,OAAO;AAAA,IACZ,MAAM,OAAO,OAAO;AAAA,MAClB;AAAA,MACA,MAAM,OAAO,OAAO;AAAA,QAClB;AAAA,QACA,OAAO,QAAQ,WAAW,QAAQ,OAAO,GAAG,IAAI;AAAA,QAChD,EAAE,MAAM,QAAQ,MAAM,UAAU;AAAA,QAChC;AAAA,QACA,CAAC,QAAQ,QAAQ;AAAA,MACnB;AAAA,MACA,QAAQ,OAAO,KAAK,UAAU;AAAA,IAChC;AAAA,EAAA;AAEJ;AAOO,SAAS,UAAU,OAA8B;AAC/C,SAAAA,YAAc,OAAO,UAAU;AACxC;AAUO,SAAS,KACd,MACA,KACA,UACA,SACiB;AACjB,SAAOC,OAAS,MAAM,KAAK,UAAU,UAAU,OAAO;AACxD;AASsB,eAAA,SAAS,MAAY,KAAW,SAA4C;AAChG,SAAOC,WAAa,MAAM,KAAK,YAAY,OAAO;AACpD;AAYsB,eAAA,SACpB,OACA,OACA,SACe;AACf,SAAOC,WAAa,OAAO,OAAO,UAAU,OAAO;AACrD;"}